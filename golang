1. las templates son una poronga... no seas forro... no uses templates.
2. el codigo compila pero no abre la pagina
3. se accede bien a las base de datos pero no entiendo el paginado de la web

package main

import (
	"database/sql" // Interactuar con bases de datos
	"fmt"          // Imprimir mensajes y esas cosas
	"log"

	"net/http"
	//"encoding/json"
	//"strconv"
	//"github.com/gorilla/mux"
	//""io/ioutil""
	_ "github.com/go-sql-driver/mysql" // La librería que nos permite conectar a MySQL

	"text/template"
)

type clima5 struct {
	Nombre    string `json:"nombre,omitempty"`
	Fecha     string `json:"fecha,omitempty"`
	Hora      string `json:"hora,omitempty"`
	Temp      string `json:"temp,omitempty"`
	VientoDir string `json:"vientodir,omitempty"`
	VelViento string `json:"velviento,omitempty"`
	LLuvia    string `json:"lluvia,omitempty"`
}
type diario2 struct {
	Nombre      string `json:"nombre,omitempty"`
	Fecha       string `json:"fecha,omitempty"`
	Hora        string `json:"hora,omitempty"`
	Tiempo      string `json:"tiempo,omitempty"`
	Visibilidad string `json:"visibilidad,omitempty"`
	N1          string `json:"n1,omitempty"`
	N2          string `json:"n2,omitempty"`
	N3          string `json:"n3,omitempty"`
	Direccion   string `json:"direccion,omitempty"`
	N4          string `json:"n4,omitempty"`
}
type historial struct {
	Nombre string `json:"nombre,omitempty"`
	Fecha  string `json:"fecha,omitempty"`
	Hora   string `json:"hora,omitempty"`
	Temp   string `json:"temp,omitempty"`
	Hum    string `json:"hum,omitempty"`
	Pnm    string `json:"Pnm,omitempty"`
	FF     string `json:"ff,omitempty"`
	DD     string `json:"dd,omitempty"`
}

func obtenerBaseDeDatosClima5() (db *sql.DB, e error) {
	usuario := "root"
	pass := ""
	host := "tcp(127.0.0.1:3306)"
	nombreBaseDeDatos := "cincodias"
	db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@%s/%s", usuario, pass, host, nombreBaseDeDatos))
	if err != nil {
		return nil, err
	}
	return db, nil
}

func obtenerBaseDeDatosHistorial() (db *sql.DB, e error) {
	usuario := "root"
	pass := ""
	host := "tcp(127.0.0.1:3306)"
	nombreBaseDeDatos := "historial"
	db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@%s/%s", usuario, pass, host, nombreBaseDeDatos))
	if err != nil {
		return nil, err
	}
	return db, nil
}

func obtenerBaseDeDatosDiario() (db *sql.DB, e error) {
	usuario := "root"
	pass := ""
	host := "tcp(127.0.0.1:3306)"
	nombreBaseDeDatos := "diario"
	db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@%s/%s", usuario, pass, host, nombreBaseDeDatos))
	if err != nil {
		return nil, err
	}
	return db, nil
}

func obtenerClima5() ([]clima5, error) {
	calima5 := []clima5{}
	db, err := obtenerBaseDeDatosClima5()

	filas, err := db.Query("SELECT fecha, hora, temp, vientoDir, velViento, lluvia, nombre FROM cincodias")
	if err != nil {
		return nil, err
	}

	// Si llegamos aquí, significa que no ocurrió ningún error
	defer filas.Close()

	// Aquí vamos a "mapear" lo que traiga la consulta en el while de más abajo
	var c clima5

	// Recorrer todas las filas, en un "while"
	for filas.Next() {
		err = filas.Scan(&c.Nombre, &c.Fecha, &c.Hora, &c.LLuvia, &c.Temp, &c.VelViento, &c.VientoDir)
		// Al escanear puede haber un error
		if err != nil {
			return nil, err
		}
		// Y si no, entonces agregamos lo leído al arreglo
		calima5 = append(calima5, c)
	}

	defer db.Close()
	// Vacío o no, regresamos el arreglo de contactos
	return calima5, nil
}

func obtenerDiario() ([]diario2, error) {
	diario := []diario2{}
	db, err := obtenerBaseDeDatosDiario()
	if err != nil {
		return nil, err
	}
	defer db.Close()
	filas, err := db.Query("SELECT nombre, fecha, hora, tiempo, visibilidad, n1, n2, n3, direccion, n4 FROM diario2")

	if err != nil {
		return nil, err
	}
	// Si llegamos aquí, significa que no ocurrió ningún error
	defer filas.Close()

	// Aquí vamos a "mapear" lo que traiga la consulta en el while de más abajo
	var c diario2

	// Recorrer todas las filas, en un "while"
	for filas.Next() {
		err = filas.Scan(&c.Nombre, &c.Fecha, &c.Hora, &c.Tiempo, &c.Visibilidad, &c.N1, &c.N2, &c.N3, &c.Direccion, &c.N4)
		// Al escanear puede haber un error
		if err != nil {
			return nil, err
		}

		// Y si no, entonces agregamos lo leído al arreglo
		diario = append(diario, c)
	}
	// Vacío o no, regresamos el arreglo de contactos
	return diario, nil
}

func obtenerHistorial() ([]historial, error) {
	historiales := []historial{}
	db, err := obtenerBaseDeDatosHistorial()
	if err != nil {
		return nil, err
	}
	defer db.Close()
	filas, err := db.Query("SELECT fecha, hora, temp, hum, pnm, dd, ff, nombre FROM historial")

	if err != nil {
		return nil, err
	}
	// Si llegamos aquí, significa que no ocurrió ningún error
	defer filas.Close()

	// Aquí vamos a "mapear" lo que traiga la consulta en el while de más abajo
	var c historial

	// Recorrer todas las filas, en un "while"
	for filas.Next() {
		err = filas.Scan(&c.Fecha, &c.Hora, &c.Temp, &c.Hum, &c.Pnm, &c.DD, &c.FF, &c.Nombre)
		// Al escanear puede haber un error
		if err != nil {
			return nil, err
		}
		// Y si no, entonces agregamos lo leído al arreglo
		historiales = append(historiales, c)
	}
	// Vacío o no, regresamos el arreglo de contactos
	return historiales, nil
}

//Plantilla de Metodos CRUD

var tmpl = template.Must(template.ParseGlob("vista/*"))

// CRUD

func indexClima5(w http.ResponseWriter, r *http.Request) {
	calima5 := []clima5{}
	db, err := obtenerBaseDeDatosClima5()

	filas, err := db.Query("SELECT fecha, hora, temp, vientoDir, velViento, lluvia, nombre FROM cincodias")
	if err != nil {
		panic(err.Error())
	}

	// Aquí vamos a "mapear" lo que traiga la consulta en el while de más abajo
	var c clima5

	// Recorrer todas las filas, en un "while"

	for filas.Next() {
		var nombre, fecha, hora, temp, viendoDir, velViento, lluvia string
		err = filas.Scan(&c.Nombre, &c.Fecha, &c.Hora, &c.LLuvia, &c.Temp, &c.VelViento, &c.VientoDir)
		if err != nil {
			panic(err.Error())
		}
		c.Fecha = fecha
		c.Hora = hora
		c.Nombre = nombre
		c.LLuvia = lluvia
		c.Temp = temp
		c.VelViento = velViento
		c.VientoDir = viendoDir
		calima5 = append(calima5, c)
	}

	tmpl.ExecuteTemplate(w, "Index", calima5)
	defer db.Close()
}

/*
func indexClimaHist(w http.ResponseWriter, r *http.Request) {
	/*	db3, err := obtenerBaseDeDatosHistorial()
		if err != nil {
			fmt.Printf("Error obteniendo base de datos: %v", err)
			return
		}
		// Terminar conexión al terminar función
		defer db3.Close()

		// Ahora vemos si tenemos conexión
		err = db3.Ping()
		if err != nil {
			fmt.Printf("Error conectando: %v", err)
			return
		}
		// Listo, aquí ya podemos usar a db!
		fmt.Printf("Conectado correctamente historial -")*/
/*datos, err := obtenerHistorial()
	if err != nil {
		fmt.Printf("Error obteniendo datos: %v", err)
		return
	}
	for _, datos := range datos {
		fmt.Printf("%v\n", datos)
	}
	tmpl.ExecuteTemplate(w, "hist", datos)
}
/*
func indexClimaDia(w http.ResponseWriter, r *http.Request) {
	/*	db2, err := obtenerBaseDeDatosDiario()
		if err != nil {
			fmt.Printf("Error obteniendo base de datos: %v", err)
			return
		}
		// Terminar conexión al terminar función
		defer db2.Close()

		// Ahora vemos si tenemos conexión
		err = db2.Ping()
		if err != nil {
			fmt.Printf("Error conectando: %v", err)
			return
		}
		// Listo, aquí ya podemos usar a db!
		fmt.Printf("Conectado correctamente diario - ")
*/
/*datos, err := obtenerClima5()
	if err != nil {
		fmt.Printf("Error obteniendo datos: %v", err)
		return
	}
	for _, datos := range datos {
		fmt.Printf("%v\n", datos)
	}
	tmpl.ExecuteTemplate(w, "dia", datos)

}

//Pagina para mostrar individualmente las cosas
/*
func showClima5d(w http.ResponseWriter, r *http.Request) {
	db, err := obtenerBaseDeDatosClima5()
	if err != nil {
		panic(err.Error())
	}
	defer db.Close()

	nombre := r.URL.Query().Get("nombre")
	filas, err := db.Query("SELECT * FROM cincodias WHERE nombre=?", nombre)

	if err != nil {
		panic(err.Error())
	}
	// Si llegamos aquí, significa que no ocurrió ningún error
	defer filas.Close()

	calima5 := []clima5{}

	// Aquí vamos a "mapear" lo que traiga la consulta en el while de más abajo
	var c clima5

	for filas.Next() {
		err = filas.Scan(&c.Nombre, &c.Fecha, &c.Hora, &c.LLuvia, &c.Temp, &c.VelViento, &c.VientoDir)
		// Al escanear puede haber un error
		if err != nil {
			panic(err.Error())
		}
		// Y si no, entonces agregamos lo leído al arreglo
		calima5 = append(calima5, c)
	}

	tmpl.ExecuteTemplate(w, "ShowClima5d", calima5)
}

/*func ShowClimaHist(w http.ResponseWriter, r *http.Request) {

}

func ShowClimaDia(w http.ResponseWriter, r *http.Request) {

}*/

func main() {
	log.Println("vamo que no vamo")

	http.HandleFunc("/", indexClima5)

	//http.HandleFunc("/", indexClimaDia)
	//http.HandleFunc("/", indexClimaHist)
	//http.HandleFunc("/", showClima5d)
	http.ListenAndServe("8080", nil)

	/*
		contactos, err := obtenerDiario()
		if err != nil {
			fmt.Printf("Error obteniendo contactos: %v", err)
			return
		}
		for _, contacto := range contactos {
			fmt.Printf("%v\n", contacto)
		}*/
}
